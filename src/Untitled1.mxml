<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               applicationComplete="Init();">
    <fx:Script><![CDATA[
		import flash.display.Bitmap;
        import mx.core.BitmapAsset;
        import flash.filters.*;
        import flash.media.Camera;


        [Embed(source="1.jpg")]
        [Bindable]
        public var imgCls:Class;

        private var camera:Camera = Camera.getCamera();
        private var W:int = 320;
        private var H:int = 240;

        private function Init() {
            camera.setMode(W ,H, 15);
            camera.setQuality(0, 100);
            myVid.attachCamera(camera);
            var myData:BitmapData = new BitmapData(W, H, true,0xff000000);
            myImage.data=new Bitmap(myData);
            init2();
        }

        private function takeShot():void {
           myImage.data.bitmapData.draw(myVid);
        }

        private function setBrightness(v1:Number, v2:Number):void {
            var cv:Number =1+(v1-128)/128;
            var co:Number =(128 * (1 - cv));
                cv+=(v2-128)/64;//brightness

            var matrix:Array = new Array();
            matrix=matrix.concat([cv,0,0,0,co]);// red
            matrix=matrix.concat([0,cv,0,0,co]);// green
            matrix=matrix.concat([0,0,cv,0,co]);// blue
            matrix=matrix.concat([0,0,0,1,0]);// alpha
            var my_filter:ColorMatrixFilter=new ColorMatrixFilter(matrix);

            // Variables that affect clamping:
            var clamp:Boolean = false;
            var clampColor:Number = 0xFF0000;
            var clampAlpha:Number = 1;
            // For illustration, keep other ConvolutionFilter variables neutral:
            var bias:Number = 0;
            var preserveAlpha:Boolean = false;
            // Also, construct a neutral matrix
            var matrixCols:Number = 3;
            var matrixRows:Number = 3;
            // Sharpness
            var matrix2:Array = [-2, -2, -2,
                           -2, 24, -2,
                          -2, -2, -2];
            // Outline
//	            var matrix:Array = [-30, 30, 0,
//                                -30, 30, 0,
//                                -30, 30, 10];
            var filter_conv:ConvolutionFilter = new ConvolutionFilter(matrixCols, matrixRows, matrix2, 8, bias, preserveAlpha, clamp, clampColor, clampAlpha);


            myImage.data.filters=[my_filter, filter_conv];

        }

        private var timer:Timer;

             private function init2():void {
                 timer = new Timer(100);
                 timer.addEventListener(TimerEvent.TIMER, timer_timer);
                 timer.start();
             }

             private function timer_timer(evt:TimerEvent):void {
                takeShot();
             }




    ]]></fx:Script>
    <s:Button click="takeShot();" label="take shot"/>

    <mx:VBox>
        <mx:Form width="300" height="100">
            <mx:FormItem label="v1">
                <s:HSlider id="bSl"
                        minimum="0"
                        maximum="255"
                        value="128"
                        showDataTip="true"
                        change="setBrightness(bSl.value,cSl.value);" />
            </mx:FormItem>
            <mx:FormItem label="v2">
                <s:HSlider id="cSl"
                        minimum="0"
                        maximum="255"
                        value="128"
                        showDataTip="true"
                        change="setBrightness(bSl.value,cSl.value);" />
            </mx:FormItem>
        </mx:Form>
        <mx:Label text="Actual Res: {camera.width} X {camera.height}" />
        <mx:HBox>
            <mx:VideoDisplay id="myVid" width="{W}" height="{H}"/>
            <mx:Image id="myImage"  width="{W}" height="{H}"/>
        </mx:HBox>

    </mx:VBox>

    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/mx";

        #rSl s|Button#track {
            chromeColor: red;
        }

        #gSl s|Button#track {
            chromeColor: green;
        }

        #bSl s|Button#track {
            chromeColor: blue;
        }
    </fx:Style>

</s:Application>
